import React from 'react';

import './App.css';
import { useState } from 'react';
import Switch from '@mui/material/Switch';
import MyComponent from './components/colorPicker';

const items = [
  { title: 'Main Light', isOn: false, id: 1 },
  { title: 'Bedroom Light', isOn: false, id: 2 },
];

const postData = async (data: any) => {
  try {
      const response = await fetch('/endpoint', {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
      });
      return await response.json();
  } catch (error) {
      throw new Error(`Error sending data: ${error}`);
  }
};

const getData = async () => {
  try {
    const response = await fetch('/endpoint', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    const data = await response.json();
    console.log(data);
    return data;
  } catch (error) {
    console.error('Error fetching data:', error);
    throw new Error(`Error fetching data: ${error}`);
  }
};

const LightSwitch: React.FC<{ onChange: (name: string, checked: boolean) => void; name: string }> = ({ onChange, name }) => {
  const [checked, setChecked] = useState(false);

  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const isChecked = event.target.checked;
    setChecked(isChecked);
    console.log(isChecked);
    postData({ name, isChecked });
    // Call the onChange function passed from the parent component
    onChange(name, isChecked);
  };

  return (
    <Switch
      checked={checked}
      onChange={handleChange}
      color="primary"
      name={name} // Pass the name prop to the switch
      inputProps={{ 'aria-label': 'primary checkbox' }}
    />
  );
};

const LightComp: React.FC<{ name: string; initialIsOn: boolean }> = ({ name, initialIsOn }) => {
  const [isOn, setIsOn] = useState<boolean>(initialIsOn);

  const toggleSwitch = () => {
      setIsOn(prevState => !prevState);
  };

  return (
      <div style={{ display: 'flex', alignItems: 'center' }}>
          <img
              src={isOn ? './on.svg' : 'off.svg'}
              alt={isOn ? 'On' : 'Off'}
              style={{ marginRight: '8px', width: '24px', height: '24px' }}
          />
          <p style={{ margin: 0, marginRight: '8px' }}>{name}</p>
          <LightSwitch onChange={toggleSwitch} name={name}/>
      </div>
  );
};

export default function BasicSwitches() {
  
  const parsedDataPromise: Promise<{ [key: string]: { state: boolean; title: string } }> = Promise.resolve(getData());

  parsedDataPromise.then(parsedData => {
    // Loop through items array
    items.forEach(item => {
      // Check if item ID exists in parsedData
      const parsedItem = parsedData[item.id.toString()];
      if (parsedItem) {
        // Update item's state based on parsedData
        item.isOn = parsedItem.state;
      }
    });
  
    console.log(items);
  });

  const listItems = items.map(item => <li><LightComp name={item.title} initialIsOn={item.isOn}/></li>);

  return (
    <div>
      <MyComponent />
      <ul>{listItems}</ul>;
    </div>
  );
}